const config = require('../config');
const { cmd } = require('../command');
const { ytsearch } = require('@dark-yasiya/yt-dl.js');

// MP4 video download
// MP4 video download with options
cmd({ 
    pattern: "mp4", 
    alias: ["video"], 
    react: "üé•", 
    desc: "Download YouTube video", 
    category: "main", 
    use: '.mp4 < Yt url or Name >', 
    filename: __filename 
}, async (conn, mek, m, { from, prefix, quoted, q, reply }) => { 
    try { 
        if (!q) return await reply("Please provide a YouTube URL or song name.");
        
        const yt = await ytsearch(q);
        if (yt.results.length < 1) return reply("No results found!");
        
        let yts = yt.results[0];  
        let apiUrl = `https://apis.davidcyriltech.my.id/download/ytmp4?url=${encodeURIComponent(yts.url)}`;
        
        let response = await fetch(apiUrl);
        let data = await response.json();
        
        if (data.status !== 200 || !data.success || !data.result.download_url) {
            return reply("Failed to fetch the video. Please try again later.");
        }

        let ytmsg = `üìπ *ùöÖùô∏ùô≥ùô¥ùôæ ùô≥ùô¥ùöÉùô∞ùöíùöïùöÇ*
‚ïëüé¨ *—ÇŒπ—Ç‚Ñì—î* ${yts.title}
‚ïë‚è≥ *‚àÇœÖ—èŒ±—ÇŒπœÉŒ∑* ${yts.timestamp}
‚ïëüëÄ *ŒΩŒπœâ—î—ï* ${yts.views}
‚ïëüë§ *Œ±œÖ—Ç–ΩœÉ—è* ${yts.author.name}
‚ïëüîó *‚ÑìŒπŒ∑–∫* ${yts.url}

*CHOOSE DOWNLOAD FORMAT:*
‚ùë1Ô∏è‚É£. üìÑ ùòãùòñùòäùòúùòîùòåùòïùòõ (no preview)
‚ùë2Ô∏è‚É£. ‚ñ∂Ô∏è ùòïùòñùòîùòàùòì ùòùùòêùòãùòåùòñ (with preview)

_*ùõ≤ùõ©Í™ùùõØùëÖùõØùê∑ ùõ£ùëå ùëÜùêªùúüùêåùêàùú•ùêÄ ùê∑ùõØùö¥Í™äÍ™ùùúüùö¥*_`;

        let contextInfo = {
            mentionedJid: [m.sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterJid: '120363379231303152@newsletter',
                newsletterName: 'ùê∂ùëåùõ£ùõØùëÖ ùëÖùêºùú•ùúüùê∑ùõ©',
                serverMessageId: 143
            }
        };

        // Send thumbnail with options
        const videoMsg = await conn.sendMessage(from, { image: { url: yts.thumbnail }, caption: ytmsg, contextInfo }, { quoted: mek });

        conn.ev.on("messages.upsert", async (msgUpdate) => {
            const replyMsg = msgUpdate.messages[0];
            if (!replyMsg.message || !replyMsg.message.extendedTextMessage) return;

            const selected = replyMsg.message.extendedTextMessage.text.trim();

            if (
                replyMsg.message.extendedTextMessage.contextInfo &&
                replyMsg.message.extendedTextMessage.contextInfo.stanzaId === videoMsg.key.id
            ) {
                await conn.sendMessage(from, { react: { text: "üì•", key: replyMsg.key } });

                switch (selected) {
                    case "1":
                        await conn.sendMessage(from, {
                            document: { url: data.result.download_url },
                            mimetype: "video/mp4",
                            fileName: `${yts.title}.mp4`,
                            contextInfo
                        }, { quoted: replyMsg });
                        break;

                    case "2":
                        await conn.sendMessage(from, {
                            video: { url: data.result.download_url },
                            mimetype: "video/mp4",
                            contextInfo
                        }, { quoted: replyMsg });
                        break;

                    default:
                        await conn.sendMessage(
                            from,
                            { text: "*‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∑Ä‡∂ª‡∂Ø‡∂ö‡∑ä. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª 1 ‡∑Ñ‡∑ù 2 ‡∂∫‡∑ú‡∂Ø‡∂±‡∑ä‡∂±.*" },
                            { quoted: replyMsg }
                        );
                        break;
                }
            }
        });

    } catch (e) {
        console.log(e);
        reply("An error occurred. Please try again later.");
    }
});

// MP3 song download
cmd({ 
    pattern: "song", 
    alias: ["ytdl3", "play"], 
    react: "üé∂", 
    desc: "Download YouTube song", 
    category: "main", 
    use: '.song < Yt url or Name >', 
    filename: __filename 
}, async (conn, mek, m, { from, prefix, quoted, q, reply }) => { 
    try { 
        if (!q) return await reply("Please provide a YouTube URL or song name.");
        
        const yt = await ytsearch(q);
        if (yt.results.length < 1) return reply("No results found!");
        
        let yts = yt.results[0];  
        let apiUrl = `https://apis.davidcyriltech.my.id/youtube/mp3?url=${encodeURIComponent(yts.url)}`;
        
        let response = await fetch(apiUrl);
        let data = await response.json();
        
        if (data.status !== 200 || !data.success || !data.result.downloadUrl) {
            return reply("Failed to fetch the audio. Please try again later.");
        }
        
        let ytmsg = `üéµ *ùöÇùôæùôΩùô∂ ùô≥ùô¥ùöÉùô∞ùô∏ùôªùöÇ*
üé∂ *—ÇŒπ—Ç‚Ñì—î* ${yts.title}
‚è≥ *‚àÇœÖ—èŒ±—ÇŒπœÉŒ∑‚ùØ* ${yts.timestamp}
üëÄ *ŒΩŒπ—îœâ—ï‚ùØ* ${yts.views}
üë§ *Œ±œÖ—Ç–ΩœÉ—è—ï‚ùØ* ${yts.author.name}
üîó *‚ÑìŒπŒ∑–∫—î‚ùØ* ${yts.url}

*Choose download format:*
1Ô∏è‚É£. üìÑ ùòîùòó3 ùòàùòö ùòãùòñùòäùòúùòîùòåùòïùòõ
2Ô∏è‚É£. üéß ùòîùòó3 ùòàùòö ùòàùòúùòãùòêùòñ (Play)
3Ô∏è‚É£. üéôÔ∏è ùòîùòó3 ùòàùòö ùòùùòñùòêùòäùòå ùòïùòñùòõùòå (PTT)

_*ùõ≤ùõ©Í™ùùõØùëÖùõØùê∑ ùõ£ùëå ùëÜùêªùúüùêåùêàùú•ùêÄ ùê∑ùõØùö¥Í™äÍ™ùùúüùö¥*_`;
        
        let contextInfo = {
            mentionedJid: [m.sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterJid: '120363379231303152@newsletter',
                newsletterName: 'ùê∂ùëåùõ£ùõØùëÖ ùëÖùêºùú•ùúüùê∑ùõ©',
                serverMessageId: 143
            }
        };
        
        // Send thumbnail with caption only
  const songmsg = await conn.sendMessage(from, { image: { url: yts.thumbnail }, caption: ytmsg, contextInfo }, { quoted: mek });

  
     
                     conn.ev.on("messages.upsert", async (msgUpdate) => {
        

                const mp3msg = msgUpdate.messages[0];
                if (!mp3msg.message || !mp3msg.message.extendedTextMessage) return;

                const selectedOption = mp3msg.message.extendedTextMessage.text.trim();

                if (
                    mp3msg.message.extendedTextMessage.contextInfo &&
                    mp3msg.message.extendedTextMessage.contextInfo.stanzaId === songmsg.key.id
                ) {
                
                            
                   await conn.sendMessage(from, { react: { text: "üì•", key: mp3msg.key } });

                    switch (selectedOption) {
case "1":   

      
      
   await conn.sendMessage(from, { document: { url: data.result.downloadUrl }, mimetype: "audio/mpeg", fileName: `${yts.title}.mp3`, contextInfo }, { quoted: mp3msg });   
      
      
break;
case "2":   
await conn.sendMessage(from, { audio: { url: data.result.downloadUrl }, mimetype: "audio/mpeg", contextInfo }, { quoted: mp3msg });
break;
case "3":   
await conn.sendMessage(from, { audio: { url: data.result.downloadUrl }, mimetype: "audio/mpeg", ptt: true, contextInfo }, { quoted: mp3msg });
break;


default:
                            await conn.sendMessage(
                                from,
                                {
                                    text: "***‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ö‡∑í. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (1 or 2 or 3) üî¥*",
                                },
                                { quoted: mp3msg }
                            );
             }}});
           
    } catch (e) {
        console.log(e);
        reply("An error occurred. Please try again later.");
    }
});
